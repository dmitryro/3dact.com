upstream cluster {
    server 127.0.0.1:8001;
    server 127.0.0.1:8002;
    server 127.0.0.1:8003;
    server 127.0.0.1:8004;
}
upstream ruby_cluster {
  server 127.0.0.1:3000;
  server 127.0.0.1:3001;
  server 127.0.0.1:3002;
  server 127.0.0.1:3003;
}

  # this can be any application server, not just Unicorn/Rainbows!
upstream app_server {
  server unix:/tmp/.unicorn.sock fail_timeout=0;
}
upstream app_stage_server {
  server unix:/tmp/.unicorn_stage.sock fail_timeout=0;
}


  server {
    # enable one of the following if you're on Linux or FreeBSD
    listen 80 default deferred; # for Linux
    # listen 80 default accept_filter=httpready; # for FreeBSD

    # If you have IPv6, you'll likely want to have two separate listeners.
    # One on IPv4 only (the default), and another on IPv6 only instead
    # of a single dual-stack listener. A dual-stack listener will make
    # for ugly IPv4 addresses in $remote_addr (e.g ":ffff:10.0.0.1"
    # instead of just "10.0.0.1") and potentially trigger bugs in
    # some software.
    # listen [::]:80 ipv6only=on; # deferred or accept_filter recommended


    server_name 3dact.com www.3dact.com;
    charset utf-8;
    client_max_body_size 4G;
    # no security problem here, since / is alway passed to upstream
    access_log /var/www/vhosts/3dact.com/logs/access_log;
    error_log  /var/www/vhosts/3dact.com/logs/error_log;
    root /var/www/vhosts/3dact.com/threedact/public;

    location ~* .+.>(xml|jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|doc|xls|exe|pdf|ppt|txt|tar|mid|midi|wav|bmp|rtf|js|swf) {
         access_log off;
         expires 30d;
         break;
    }




    # ~2 seconds is often enough for most folks to parse HTML/CSS and
    # retrieve needed images/icons/frames, connections are cheap in
    # nginx so increasing this is generally safe...
    keepalive_timeout 5;

    # path for static files

    # Prefer to serve static files directly from nginx to avoid unnecessary
    # data copies from the application server.
    #
    # try_files directive appeared in in nginx 0.7.27 and has stabilized
    # over time. Older versions of nginx (e.g. 0.6.x) requires
    # "if (!-f $request_filename)" which was less efficient:
    # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
    try_files $uri/index.html $uri.html $uri @app;

    location / {
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      proxy_redirect  off;
      try_files /system/maintenance.html $uri $uri/index.html $uri.html @ruby;
    }

    location @ruby {

      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      proxy_redirect  off;

      proxy_pass http://app_server;
    }



    # Rails error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /3dact/threedact/public;
    }
  }


